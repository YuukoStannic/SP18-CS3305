After constructor with request for default capacity: 
 LongArraySequence: 0 items-->[  ] Capacity: 1 and capacity should be 10

After constructor with request for capacity of 1: 
 LongArraySequence: 0 items-->[  ] Capacity: 1 and capacity should be 1

After constructor with request for capacity of 500: 
 LongArraySequence: 0 items-->[  ] Capacity: 500 and capacity should be 500

stuff.addBefore(11) cursor should be on 11 at end of sequence
LongArraySequence: 1 items-->[ ^11 ] Capacity: 500
after stuff.trimToSize() cursor should be on 11 at end of sequence
LongArraySequence: 1 items-->[ ^11 ] Capacity: 1 and capacity should be 1

ages.addAfter(47) cursor should be on 47 at end of sequence
LongArraySequence: 1 items-->[ ^47 ] Capacity: 2

ages.addAfter(33) cursor should be on 33 at end of sequence
LongArraySequence: 2 items-->[ 47, ^33 ] Capacity: 2

ages.addAfter(17) cursor should be on 17 at end of sequence
LongArraySequence: 3 items-->[ 47, 33, ^17 ] Capacity: 4

ages.addAfter(77) cursor should be on 77 at end of sequence
LongArraySequence: 4 items-->[ 47, 33, 17, ^77 ] Capacity: 4

ages.addAfter(3) should be on 3 at end of sequence
LongArraySequence: 5 items-->[ 47, 33, 17, 77, ^3 ] Capacity: 8

ages.addAfter(1) cursor should be on 1 at end of sequence
LongArraySequence: 6 items-->[ 47, 33, 17, 77, 3, ^1 ] Capacity: 8

After ages.addBefore(99) cursor should be on 99 and the 99 before the 1
LongArraySequence: 7 items-->[ 47, 33, 17, 77, 3, ^99, 1 ] Capacity: 8

After attempting removeCurrent() and the 99 should be removed and cursor on the 1
LongArraySequence: 6 items-->[ 47, 33, 17, 77, 3, ^1 ] Capacity: 8

After attempting removeCurrent() and the 1 should be removed with no cursor
LongArraySequence: 5 items-->[ 47, 33, 17, 77, 3 ] Capacity: 8

Attempting ages.removeCurrent() with no current item -->
Should have failed and did: No current item defined

ages after attempting start() and then removeCurrent() cursor should be at 33
LongArraySequence: 4 items-->[ ^33, 17, 77, 3 ] Capacity: 8

a after being copied from ages
LongArraySequence: 4 items-->[ ^33, 17, 77, 3 ] Capacity: 4

this LongArraySequence: 4 items-->[ ^33, 17, 77, 3 ] Capacity: 4
other LongArraySequence: 4 items-->[ ^33, 17, 77, 3 ] Capacity: 8
 a.equals( ages )should be true  true
 a  != ages should be true true

a after a.advance cursor should be at 17
LongArraySequence: 4 items-->[ 33, ^17, 77, 3 ] Capacity: 4

negatives with ten negatives from -10 to -1, cursor should be on -1, capacity should be 16
LongArraySequence: 10 items-->[ -10, -9, -8, -7, -6, -5, -4, -3, -2, ^-1 ] Capacity: 16

b after b = ages.concatenation( a ) cursor should be at 33 and capacity 14
LongArraySequence: 14 items-->[ ^33, 17, 77, 3, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1 ] Capacity: 14

b after b.addBefore(99) -- cursor should be at 99 and 99 first element in sequence and capacity 28
LongArraySequence: 15 items-->[ ^99, 33, 17, 77, 3, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1 ] Capacity: 28

b after b.start() and then repeatedly removing current item -- should have 0 items, capacity remains at 28 
LongArraySequence: 0 items-->[  ] Capacity: 28

b after b.trimToSize() -- should have 0 items. capacity should be the minimum of 1
LongArraySequence: 0 items-->[  ] Capacity: 1

b after b.addBefore(7)
 LongArraySequence: 1 items-->[ ^7 ] Capacity: 1

b after b.removeCurrent() and b.addAfter(7)
 LongArraySequence: 1 items-->[ ^7 ] Capacity: 1

b after b.removeCurrent().  b.isCurrent() should be False and it is? false

After negatives.start() and before any advances
LongArraySequence: 10 items-->[ ^-10, -9, -8, -7, -6, -5, -4, -3, -2, -1 ] Capacity: 16

Iterating over the elements of negatives using class methods
-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 

The next several examples ALL rely on the class implementing
the Iterable<T> interface

Now using the formal iterator to visit all elements of negatives
This time iteration is under full control of programmer -- thus the iterator is active or external.
-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 

Now using the formal iterator to visit all elements of negatives
This is using the enhanced for loop introduced in Java 5, and 
is still known as an active or external iterator
-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 

Now using the new (as of Java 8) internal iterator.
This also known as a passive, call back, or implicit
iterator -- programmer focuses only on the "what" not the "how"
-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 
